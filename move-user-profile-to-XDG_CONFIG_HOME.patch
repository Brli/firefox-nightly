From aeb0f7f55617094bcdebd42f7e442f72d29dd049 Mon Sep 17 00:00:00 2001
From: Brli <brli@chakralinux.org>
Date: Tue, 4 Jun 2024 15:19:02 +0800
Subject: [PATCH] move user profile to XDG_CONFIG_HOME

---
 toolkit/moz.configure                  |  4 ++--
 toolkit/xre/nsXREDirProvider.cpp       | 31 ++++++++++++++------------
 xpcom/io/nsAppFileLocationProvider.cpp | 12 ++++++++--
 3 files changed, 29 insertions(+), 18 deletions(-)

diff --git a/toolkit/moz.configure b/toolkit/moz.configure
index c943ef2570..81fa7828c7 100644
--- a/toolkit/moz.configure
+++ b/toolkit/moz.configure
@@ -3161,7 +3161,7 @@ with only_when(compile_environment):
     def default_user_appdir(target):
         if target.kernel in ("WINNT", "Darwin"):
             return "Mozilla"
-        return ".mozilla"
+        return ".config/floorp"
 
     option(
         "--with-user-appdir",
@@ -3174,7 +3174,7 @@ with only_when(compile_environment):
     def user_appdir(appdir):
         if not appdir:
             die("--without-user-appdir is not a valid option.")
-        if "/" in appdir[0]:
+        if False:
             die("--with-user-appdir must be a single relative path.")
         return '"{}"'.format(appdir[0])
 
diff --git a/toolkit/xre/nsXREDirProvider.cpp b/toolkit/xre/nsXREDirProvider.cpp
index 41d2353fe8..d4f13146b4 100644
--- a/toolkit/xre/nsXREDirProvider.cpp
+++ b/toolkit/xre/nsXREDirProvider.cpp
@@ -1259,14 +1259,16 @@ nsresult nsXREDirProvider::GetUserDataDirectoryHome(nsIFile** aFile,
   NS_ENSURE_SUCCESS(rv, rv);
 
   rv = NS_NewLocalFile(path, true, getter_AddRefs(localDir));
+  NS_ENSURE_SUCCESS(rv, rv);
 #elif defined(XP_UNIX)
   const char* homeDir = getenv("HOME");
   if (!homeDir || !*homeDir) return NS_ERROR_FAILURE;
 
 #  ifdef ANDROID /* We want (ProfD == ProfLD) on Android. */
   aLocal = false;
-#  endif
-
+#  else
+  rv = NS_NewNativeLocalFile(nsDependentCString(homeDir), true,
+                             getter_AddRefs(localDir));
   if (aLocal) {
     // If $XDG_CACHE_HOME is defined use it, otherwise use $HOME/.cache.
     const char* cacheHome = getenv("XDG_CACHE_HOME");
@@ -1274,14 +1276,16 @@ nsresult nsXREDirProvider::GetUserDataDirectoryHome(nsIFile** aFile,
       rv = NS_NewNativeLocalFile(nsDependentCString(cacheHome), true,
                                  getter_AddRefs(localDir));
     } else {
-      rv = NS_NewNativeLocalFile(nsDependentCString(homeDir), true,
-                                 getter_AddRefs(localDir));
       if (NS_SUCCEEDED(rv)) rv = localDir->AppendNative(".cache"_ns);
     }
   } else {
-    rv = NS_NewNativeLocalFile(nsDependentCString(homeDir), true,
-                               getter_AddRefs(localDir));
+    rv = localDir->AppendRelativeNativePath(nsDependentCString(".config"));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    rv = EnsureDirectoryExists(localDir);
+    NS_ENSURE_SUCCESS(rv, rv);
   }
+#   endif // ANDROID
 #else
 #  error "Don't know how to get product dir on your platform"
 #endif
@@ -1370,7 +1374,7 @@ nsresult nsXREDirProvider::AppendSysUserExtensionPath(nsIFile* aFile) {
 
 #if defined(XP_MACOSX) || defined(XP_WIN)
 
-  static const char* const sXR = "Mozilla";
+  static const char* const sXR = "Floorp";
   rv = aFile->AppendNative(nsDependentCString(sXR));
   NS_ENSURE_SUCCESS(rv, rv);
 
@@ -1380,9 +1384,11 @@ nsresult nsXREDirProvider::AppendSysUserExtensionPath(nsIFile* aFile) {
 
 #elif defined(XP_UNIX)
 
-  static const char* const sXR = ".mozilla";
+#   if !defined(MOZ_WIDGET_GTK)
+  static const char* const sXR = "floorp";
   rv = aFile->AppendNative(nsDependentCString(sXR));
   NS_ENSURE_SUCCESS(rv, rv);
+#   endif
 
   static const char* const sExtensions = "extensions";
   rv = aFile->AppendNative(nsDependentCString(sExtensions));
@@ -1448,9 +1454,6 @@ nsresult nsXREDirProvider::AppendProfilePath(nsIFile* aFile, bool aLocal) {
   NS_ENSURE_SUCCESS(rv, rv);
 #elif defined(XP_UNIX)
   nsAutoCString folder;
-  // Make it hidden (by starting with "."), except when local (the
-  // profile is already under ~/.cache or XDG_CACHE_HOME).
-  if (!aLocal) folder.Assign('.');
 
   if (!profile.IsEmpty()) {
     // Skip any leading path characters
@@ -1470,12 +1473,12 @@ nsresult nsXREDirProvider::AppendProfilePath(nsIFile* aFile, bool aLocal) {
       folder.Append(vendor);
       ToLowerCase(folder);
 
-      rv = aFile->AppendNative(folder);
-      NS_ENSURE_SUCCESS(rv, rv);
-
       folder.Truncate();
     }
 
+    rv = aFile->AppendNative(folder);
+    NS_ENSURE_SUCCESS(rv, rv);
+
     // This can be the case in tests.
     if (!appName.IsEmpty()) {
       folder.Append(appName);
diff --git a/xpcom/io/nsAppFileLocationProvider.cpp b/xpcom/io/nsAppFileLocationProvider.cpp
index aedaad1b4f..9494ae327b 100644
--- a/xpcom/io/nsAppFileLocationProvider.cpp
+++ b/xpcom/io/nsAppFileLocationProvider.cpp
@@ -212,14 +212,22 @@ nsresult nsAppFileLocationProvider::GetProductDirectory(nsIFile** aLocalFile,
   if (NS_FAILED(rv)) {
     return rv;
   }
-#else
-#  error dont_know_how_to_get_product_dir_on_your_platform
 #endif
 
+#if defined(MOZ_WIDGET_GTK)
+  // exclude android/iOS from this check
+  rv = localDir->AppendRelativeNativePath(nsDependentCString(".config"));
+  rv = localDir->AppendRelativeNativePath(nsDependentCString("floorp"));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+#else
   rv = localDir->AppendRelativeNativePath(DEFAULT_PRODUCT_DIR);
   if (NS_FAILED(rv)) {
     return rv;
   }
+#endif
+
   rv = localDir->Exists(&exists);
 
   if (NS_SUCCEEDED(rv) && !exists) {
-- 
2.45.2

